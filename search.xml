<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTTP协议(包括GET和POST)</title>
      <link href="/stoneblog/2020/04/28/servleta/"/>
      <url>/stoneblog/2020/04/28/servleta/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议 "></a><center>HTTP协议 </center></h1><h2 id="什么是HTTP协议"><a href="#什么是HTTP协议" class="headerlink" title="什么是HTTP协议"></a>什么是HTTP协议</h2><ul><li><p>HTTP协议（HyperText Transfer Protocol，超文本传输协议）是因特网上应用最为广泛的一种网络传输协议，是一个无状态的请求/响应协议。</p></li><li><p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p><h3 id="HTTP请求-响应结构"><a href="#HTTP请求-响应结构" class="headerlink" title="HTTP请求/响应结构"></a>HTTP请求/响应结构</h3><h4 id="1-请求"><a href="#1-请求" class="headerlink" title="1. 请求"></a>1. 请求</h4></li><li><p>一个HTTP请求由四个部分组成：请求行、请求头部、空行、请求体。<br><img src="/stoneblog/2020/04/28/servleta/%E8%AF%B7%E6%B1%82.png" alt></p></li><li><p>请求行</p><ul><li>请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。比如 GET /data/info.html HTTP/1.1</li><li>方法字段就是HTTP使用的请求方法，比如常见的GET/POST</li><li>其中HTTP协议版本有两种：HTTP1.0/HTTP1.1 可以这样区别：</li><li>HTTP1.0对于每个连接都只能传送一个请求和响应，请求就会关闭，            HTTP1.0没有Host字段;而HTTP1.1在同一个连接中可以传送多个请求和响应，多个请求可以重叠和同时进行，HTTP1.1必须有Host字段。</li></ul></li><li><p>请求头 </p><ul><li>HTTP客户程序(例如浏览器)，向服务器发送请求的时候必须指明请求类型(一般是GET或者 POST)。如有必要，客户程序还可以选择发送其他的请求头。大多数请求头并不是必需的，但Content-Length除外。对于POST请求来说 Content-Length必须出现。</li><li>常见的请求头字段含义：<ul><li>Accept： 浏览器可接受的MIME类型。</li><li>Accept-Charset：浏览器可接受的字符集。</li><li>Accept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。</li><li>Accept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。</li><li>Authorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。</li><li>Content-Length：表示请求消息正文的长度。</li><li>Host： 客户机通过这个头告诉服务器，想访问的主机名。Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。</li><li>If-Modified-Since：客户机通过这个头告诉服务器，资源的缓存时间。只有当所请求的内容在指定的时间后又经过修改才返回它，否则返回304“Not Modified”应答。</li><li>Referer：客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的(防盗链)。包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。</li><li>User-Agent：User-Agent头域的内容包含发出请求的用户信息。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。</li><li>Cookie：客户机通过这个头可以向服务器带数据，这是最重要的请求头信息之一。</li><li>Pragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝。</li><li>From：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。</li><li>Connection：处理完这次请求后是否断开连接还是继续保持连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP 1.1(HTTP 1.1默认进行持久连接)，它就可以利用持久连接的优点，当页面包含多个元素时(例如Applet，图片)，显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。</li><li>Range：Range头域可以请求实体的一个或者多个子范围。例如，   <ul><li>表示头500个字节：bytes=0-499</li><li>表示第二个500字节：bytes=500-999</li><li>表示最后500个字节：bytes=-500</li><li>表示500字节以后的范围：bytes=500-</li><li>第一个和最后一个字节：bytes=0-0,-1</li><li>同时指定几个范围：bytes=500-600,601-999</li><li>但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206(PartialContent)返回而不是以200 (OK)。</li><li>UA-Pixels，UA-Color，UA-OS，UA-CPU：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。</li></ul></li></ul></li></ul></li><li><p>空行(请求头和请求体之间的空行)</p><ul><li>它的作用是通过一个空行，告诉服务器请求头部到此为止。    </li></ul></li><li><p>请求体  </p><ul><li><p>若方法字段是GET，则此项为空，没有数据，提交的数据在地址栏上。</p></li><li><p>若方法字段是POST,则通常来说此处放置的就是要提交的数据</p></li><li><p>比如要使用POST方法提交一个表单，其中有user字段中数据为“lisi”, password字段为12345，那么这里的请求体就是 user=lisi&amp;password=12345，使用&amp;来连接各个字段。</p><h4 id="2-响应"><a href="#2-响应" class="headerlink" title="2. 响应"></a>2. 响应</h4><ul><li>同样的，HTTP响应报文也由三部分组成：响应行、响应头、响应体<br><img src="http%E5%93%8D%E5%BA%94.png" alt><br><img src="/stoneblog/2020/04/28/servleta/last-modified.png" alt></li><li>响应行</li></ul><ul><li>响应行一般由协议版本、状态码和状态描述组成 比如 HTTP/1.1 200 OK</li><li>常见状态码见图中</li></ul><ul><li>响应头</li></ul><ul><li><p>响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据。</p></li><li><p>设置HTTP响应头往往和状态码结合起来。例如，有好几个表示“文档位置已经改变”的状态代码都伴随着一个Location  头，而401(Unauthorized)状态代码则必须伴随一个WWW-Authenticate头。然而，即使在没有设置特殊含义的状态代码时，指定应答头也是很有用的。应答头可以用来完成：设置Cookie，指定修改日期，指示浏览器按照指定的间隔刷新页面，声明文档的长度以便利用持久HTTP连接，……等等许多其他任务。</p></li><li><p>常见的响应头字段含义：</p><ul><li><p>Allow：服务器支持哪些请求方法(如GET、POST等)。</p></li><li><p>Content-Encoding：文档的编码(Encode)方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。<a href="https://www.2cto.com/kf/ware/Java/" target="_blank" rel="noopener">Java</a>的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE4、IE5才支持它。因此，Servlet应该通过查看Accept-Encoding头(即request.getHeader(“Accept- Encoding”))检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</p></li><li><p>Content-Length：表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</p></li><li><p>Content- Type：表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置 Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</p></li><li><p>Date：当前的GMT时间，例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</p></li><li><p>Expires：告诉浏览器把回送的资源缓存多长时间，-1或0则是不缓存。</p></li><li><p>Last-Modified：文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304(Not Modified)状态。Last-Modified也可用setDateHeader方法来设置。</p></li><li><p>Location：这个头配合302状态码使用，用于重定向接收者到一个新URI地址。表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</p></li><li><p>Refresh：告诉浏览器隔多久刷新一次，以秒计。</p></li><li><p>Server：服务器通过这个头告诉浏览器服务器的类型。Server响应头包含处理请求的原始服务器的软件信息。此域能包含多个产品标识和注释，产品标识一般按照重要性排序。Servlet一般不设置这个值，而是由Web服务器自己设置。</p></li><li><p>Set-Cookie：设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。</p></li><li><p>Transfer-Encoding：告诉浏览器数据的传送格式。</p></li><li><p>WWW-Authenticate：客户应该在Authorization头中提供什么类型的授权信息?在包含401(Unauthorized)状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=\\”executives\\”“)。注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问。</p></li><li><p>注：设置应答头最常用的方法是HttpServletResponse的setHeader，该方法有两个参数，分别表示应答头的名字和值。和设置状态代码相似，设置应答头应该在发送任何文档内容之前进行。</p></li><li><p>setDateHeader方法和setIntHeadr方法专门用来设置包含日期和整数值的应答头，前者避免了把Java时间转换为GMT时间字符串的麻烦，后者则避免了把整数转换为字符串的麻烦。</p></li><li><p>HttpServletResponse还提供了许多设置<br>setContentType：设置Content-Type头。大多数Servlet都要用到这个方法。</p></li><li><p>setContentLength：设置Content-Length头。对于支持持久HTTP连接的浏览器来说，这个函数是很有用的。</p></li><li><p>addCookie：设置一个Cookie(Servlet API中没有setCookie方法，因为应答往往包含多个Set-Cookie头)。</p></li></ul></li></ul><ul><li>响应体  </li></ul><ul><li>响应体就是响应的消息体，如果是纯数据就是返回纯数据，如果请求的是HTML页面，那么返回的就是HTML代码，如果是JS就是JS代码，如此之类。</li></ul></li></ul></li></ul><h3 id="GET-和-POST-分区"><a href="#GET-和-POST-分区" class="headerlink" title="GET 和 POST 分区"></a>GET 和 POST 分区</h3><h4 id="1-提交数据的形式："><a href="#1-提交数据的形式：" class="headerlink" title="1. 提交数据的形式："></a>1. 提交数据的形式：</h4><ul><li>GET请求的数据会附在URL之后(就是把数据放置在HTTP协议头中)，会直接展现在地址栏中，以?分割URL和传输数据，参数之间以&amp;相连，如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0%E5 %A5%BD。<br>如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，<br>得出如：%E4 %BD%A0%E5%A5%BD，其中%XX中的XX为该符号以16进制表示的ASCII。<br>而POST方法则会把数据放到请求数据字段中以&amp;分隔各个字段，请求行不包含数据参数，地址栏也不会额外附带参数</li></ul><ol start="2"><li>提交数据的大小</li></ol><ul><li>get方法提交数据的大小直接影响到了URL的长度，但HTTP协议规范中其实是没有对URL限制长度的，限制URL长度的是客户端或服务器的支持的不同所影响：比如IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。<br>post方式HTTP协议规范中也没有限定，起限制作用的是服务器的处理程序的处理能力。<br>所以大小的限制还是得受各个web服务器配置的不同而影响。</li></ul><ol start="3"><li>提交数据的安全</li></ol><ul><li>POST比GET方式的安全性要高，通过GET提交数据，用户名和密码将明文出现在URL上，因为一下几个原因get方式安全性会比post弱：<br>(1)登录页面有可能被浏览器缓存<br>(2)其他人查看浏览器的历史纪录，那么别人就可 以拿到你的账号和密码了<br>(3)当遇上跨站的攻击时，安全性的表现更差了</li></ul>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 编辑器语法</title>
      <link href="/stoneblog/2020/04/27/hello-world/"/>
      <url>/stoneblog/2020/04/27/hello-world/</url>
      
        <content type="html"><![CDATA[<!-- ![](one.jpg) --><h1 id="Markdown的基本语法"><a href="#Markdown的基本语法" class="headerlink" title="Markdown的基本语法 "></a><center>Markdown的基本语法 </center></h1><blockquote><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。<br>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。<br>Markdown 编写的文档后缀为 .md, .markdown。当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。</p></blockquote><h2 id="一，基本技巧"><a href="#一，基本技巧" class="headerlink" title="一，基本技巧"></a>一，基本技巧</h2><h3 id="1-代码高亮"><a href="#1-代码高亮" class="headerlink" title="1.  代码高亮"></a>1.  代码高亮</h3><pre><code> ```javascript    $(document).ready(function(){       alert(&quot;hello world&quot;);    });```</code></pre><h3 id="2-标题"><a href="#2-标题" class="headerlink" title="2. 标题"></a>2. 标题</h3><blockquote><p>文章内容较多时，可以用标题分段：</p></blockquote><pre><code>标题一=====标题二--------- # 大标题## 小标题</code></pre><h3 id="3-粗斜体"><a href="#3-粗斜体" class="headerlink" title="3. 粗斜体"></a>3. 粗斜体</h3><pre><code>*斜体文本****斜体文本***</code></pre><h3 id="4-链接"><a href="#4-链接" class="headerlink" title="4. 链接"></a>4. 链接</h3><blockquote><p>常用链接方法</p></blockquote><pre><code>文字链接  [链接名称](http://链接网址)网址链接  &lt;http://链接网址&gt;</code></pre><blockquote><p>高级链接技巧</p></blockquote><blockquote><p>这个链接用 1 作为网址变量 [Google][1].<br>这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].<br>然后在文档的结尾为变量赋值（网址）</p></blockquote><pre><code>  [1]: http://www.google.com/  [yahoo]: http://www.yahoo.com/</code></pre><h3 id="5-列表"><a href="#5-列表" class="headerlink" title="5.  列表"></a>5.  列表</h3><blockquote><p>普通无序列表</p></blockquote><pre><code>- 列表文本前使用 [减号+空格]+ 列表文本前使用 [加号+空格]* 列表文本前使用 [星号+空格]</code></pre><blockquote><p>普通有序列表</p></blockquote><pre><code>1. 列表前使用 [数字+空格]2. 我们会自动帮你添加数字7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3</code></pre><blockquote><p> 列表嵌套</p></blockquote><pre><code>1. 列出所有元素：    - 无序列表元素 A        1. 元素 A 的有序子列表    - 前面加四个空格2. 列表里的多段换行：    前面必须加四个空格，    这样换行，整体的格式不会乱3. 列表里引用：    &gt; 前面空一行    &gt; 仍然需要在 &gt;  前面加四个空格4. 列表里代码段：    前面四个空格，之后按代码语法 ``` 书写    或者直接空八个，引入代码块</code></pre><h3 id="6-引用"><a href="#6-引用" class="headerlink" title="6. 引用"></a>6. 引用</h3><blockquote><p>普通引用</p></blockquote><pre><code>&gt; 引用文本前使用 [大于号+空格]&gt; 折行可以不加，新起一行都要加上哦</code></pre><blockquote><p>引用里嵌套引用</p></blockquote><pre><code>&gt; 最外层引用&gt; &gt; 多一个&gt; 嵌套一层引用&gt; &gt;&gt; 可以套很多层</code></pre><blockquote><p>引用里面嵌套列表</p></blockquote><pre><code>&gt;  -  这是引用里面嵌套一个列表&gt;  - 还可以有子列表&gt;     * 子列表需要从 - 之后延后四个空格开始</code></pre><blockquote><p>应用里面嵌套代码块</p></blockquote><pre><code>&gt;     同样的, 在前面加四个空格形成代码块&gt;  ``` &gt; 或者使用```形成代码块&gt;  ```</code></pre><h3 id="7-图片"><a href="#7-图片" class="headerlink" title="7. 图片"></a>7. 图片</h3><blockquote><p>跟连接的方法区别在于前面加了个感叹号! 这样是不是觉得好记多了呢?</p></blockquote><pre><code>![图片名称](http://图片网址)</code></pre><blockquote><p>当然,你也可以像网址那样对图片网址使用变量</p></blockquote><pre><code>这个链接用1作为网址的变量 [baidu][1].然后再文档的结尾位置变量赋值网址(网址) [1]: http:// www.baidu.com/logo.png</code></pre><h3 id="7-换行"><a href="#7-换行" class="headerlink" title="7. 换行"></a>7. 换行</h3><blockquote><p>如果另起一行,只需在当前行的末尾加2个空格</p></blockquote><pre><code>在当前行的末尾加2个空格   这样就会另起一行</code></pre><blockquote><blockquote><p> 如果要新起一个段落,只需要空出一行即可。</p></blockquote></blockquote><h3 id="8-分隔符"><a href="#8-分隔符" class="headerlink" title="8. 分隔符"></a>8. 分隔符</h3><blockquote><p>如果你有写分割线的习惯,可以新起一行输入三个减号-。当前后都有段落时,请空出一行:</p></blockquote><pre><code>前面的段落---后面的段落</code></pre><h2 id="二，高级技巧"><a href="#二，高级技巧" class="headerlink" title="二，高级技巧"></a>二，高级技巧</h2><h3 id="1-行内-HTML-元素"><a href="#1-行内-HTML-元素" class="headerlink" title="1.  行内 HTML 元素"></a>1.  行内 HTML 元素</h3><blockquote><p>目前只支持部分段内 HTML 元素效果，包括 </p></blockquote><pre><code>&lt;kdb&gt; &lt;b&gt;  &lt;i&gt;  &lt;em&gt;  &lt;sup&gt;  &lt;sub&gt;  &lt;br&gt;</code></pre><p>键位显示</p><pre><code>使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑</code></pre><p>代码块</p><pre><code>使用&lt;pre&gt;&lt;/pre&gt;元素同样可以形成代码块</code></pre><p>粗斜体</p><pre><code>&lt;b&gt;Markdown 再此同样适用, 如 *加粗*  &lt;/b&gt;</code></pre><h3 id="2-符号转义"><a href="#2-符号转义" class="headerlink" title="2.  符号转义"></a>2.  符号转义</h3><blockquote><p>如果你的描述中需要用到 markdown 的符号，比如_#等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如\_\#\进行避免。</p></blockquote><pre><code>\_不想这里的文本变斜体\_\*\*不想这里的文本被加粗\*\*</code></pre><h3 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3. 扩展"></a>3. 扩展</h3><blockquote><p>支持 jsfiddle、gist、runjs、优酷视频，直接填写 url，在其之后会自动添加预览点击会展开相关内容。</p></blockquote><pre><code>http://{url_of_the_fiddle}/embedded/[{tabs}/[{style}]]/https://gist.github.com/{gist_id}http://runjs.cn/detail/{id}http://v.youku.com/v_show/id_{video_id}.html</code></pre><h3 id="4-公式"><a href="#4-公式" class="headerlink" title="4. 公式"></a>4. 公式</h3><blockquote><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符$$包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p></blockquote><pre><code>$$ x = {-b \pm \sqrt{b^2-4ac} \over 2a}. $$$$x \href{why-equal.html}{=} y^2 + 1$$</code></pre><blockquote><p>同时也支持 HTML 属性，如：</p><pre><code> $$ (x+1)^2 = \class{hidden}{(x+1)(x+1)} $$$$(x+1)^2 = \cssId{step1}{\style{visibility:hidden}{(x+1)(x+1)}}$$</code></pre></blockquote><hr><br><div align="right">【完结】</div>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
