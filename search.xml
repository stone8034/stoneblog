<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>会话技术Cookie&amp;Session</title>
      <link href="/stoneblog/2020/05/02/cookiesession/"/>
      <url>/stoneblog/2020/05/02/cookiesession/</url>
      
        <content type="html"><![CDATA[<h1 id="会话技术Cookie-amp-Session"><a href="#会话技术Cookie-amp-Session" class="headerlink" title="会话技术Cookie&amp;Session"></a>会话技术Cookie&amp;Session</h1><h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><ol><li>存储客户端的状态<br>会话技术是帮助服务器记住客户端状态(区分客户端)</li><li>会话技术<br>从打开一个浏览器访问某个站点，到关闭这个浏览器的整个过程，称为一次会话。会话技术就是记录这次会话中客户端的状态与数据的。<br>会话技术分为Cookie 和Session：<br>Cookie: 数据存储在客户端本地，减少服务器的压力，安全性不好，客户端可以cookie<br>Session: 数据存储到服务器端，安全性相对好，增加服务器的压力</li></ol><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p><img src="/stoneblog/2020/05/02/cookiesession/cookie%E6%8A%80%E6%9C%AF%E7%9A%84%E8%B4%AD%E7%89%A9%E8%BF%87%E7%A8%8B.png" alt></p><ol><li><p>服务端向客户端发送一个Cookie<br>创建Cookie：Cookie cookie= new Cookie(String cookieName, String cookieValue);</p></li><li><p>发送到客户端: response.addCookie(cookie);</p></li><li><p>设置Cookie 在客户端的持久化时间<br>cookie.cookie.setMaxAge(时间秒);<br>注意: 如果不设置持久化时间，Cookie会存储在浏览器内存中，浏览器关闭cookie信息销毁(会话级别的cookie)，如果设置持久化时间，cookie信息会被持久化到浏览器的磁盘文件里</p></li><li><p>设置cookie的携带路径<br>cookie.setPath(url);<br>如果不设置默认也会有一个携带路径，*默认为当前路径的上一级路径*</p></li><li><p>删除cookie<br>Cookie cookie  = new Cookie(“stone”,””);<br>cookie.setMaxAge(0);</p></li><li><p>注意: cookie中不能存储中文</p></li><li><p>获取Cookie</p><pre class=" language-java"><code class="language-java">     Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cookies <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span><span class="token punctuation">{</span>             response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre></li></ol><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p><img src="/stoneblog/2020/05/02/cookiesession/Session%E6%B5%81%E7%A8%8B.png" alt></p><p>session技术是将数据存储在服务器端的技术，会为每一个客户端都创建一块内存空间存储客户的数据，但客户端需要每次都携带一个标识ID去服务器中寻找属于自己的内存空间。所以说session的实现是基于Cookie的，Session需要借助于Cookie存储客户的唯一性标识JSESSIOINID</p><ol><li>获取(创建)Session对象<br>HttpSession session = request.getSession();<br>方法内部会判断该客户端是否在服务器端已经存在的session<br>如果该客户端在此服务器不存在session 那么就会创建一个session对象<br>如果该客户端在此服务器上存在session 获得已经存在的该session返回<br>(实质就是根据JSESSIONID判断该客户端是否存在服务器已经存在session了)</li><li>获得session的JESSIONID<br>String id = session.getId();//该session对象的id</li><li>session存取数据<br>session.setAttribute(String name,Object obj);// 存<br>session.getAttribute(String name);// 取 </li><li>Session对象的生命周期（面试或者笔试）<br>4.1创建: 第一次执行request.getSession();时创建<br>4.2销毁:<br>（1）session过期/失效(默认30分钟) 可在工程的web.xml 文件中配置<br>默认30分钟是从不操作服务器的资源开始计时<br>（2）服务器(非正常)关闭时<br>（3）手动销毁 session.invalidate(); (invalidate 使无效)<br>4.3作用范围:  默认在一次会话中，也就是说在，一次会话中任何资源公用一个session对象</li><li>Session持久化<br>手动创建一个存储JSESSIONID的Cookie,为该cookie设置持久化时间<br>String id = session.getId();<br>Cookie cookie = new Cookie(“JSESSIONID”,id);<br>cookie.setMaxAge(60*10);</li></ol>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 会话技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/stoneblog/2020/05/01/sql/"/>
      <url>/stoneblog/2020/05/01/sql/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a><center>SQL</center></h2><p><a href="https://www.mysqlzh.com/doc/124.html" target="_blank" rel="noopener">参考</a></p><h3 id="开启关闭数据库"><a href="#开启关闭数据库" class="headerlink" title="开启关闭数据库"></a>开启关闭数据库</h3><p>net start mysql<br>net stop mysql </p><h3 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h3><p>进入cmd 然后 mysql -u root -p 密码</p><h3 id="sql-分类"><a href="#sql-分类" class="headerlink" title="sql 分类"></a>sql 分类</h3><ol><li>数据库定义语言: DDL, 用来定义数据库对象:数据库database,表table,列column等。<br>关键字：创建create ,修改 alter,删除,drop等(结构)</li><li>数据库操作语言: DML,对数据库中表的记录进行更新,<br>关键词: 插入insert,删除delete,更新update等(数据)</li><li>数据查询语言: DQL,用来查询表中的记录。<br>关键词select,from,where 等</li></ol><h3 id="对库操作"><a href="#对库操作" class="headerlink" title="对库操作"></a>对库操作</h3><ol><li><p>创建数据库: create database 数据库名; </p><p> create database 数据库名 character set 字符集;</p></li><li><p>查看数据库:<br> show databases; </p></li><li><p>查看编码:<br> show create database 数据库名;</p></li><li><p>删除数据库:<br> drop database 数据库名;</p></li><li><p>使用数据库:<br> use 数据库名;</p></li><li><p>查看正在使用(操作)的数据库:<br> select databases();</p></li><li><p>修改数据库的字符集:<br>alter database 数据库名 character set 字符集;</p></li></ol><h3 id="对表操作"><a href="#对表操作" class="headerlink" title="对表操作"></a>对表操作</h3><ol><li><p>创建表: create table 表名(<br>字段名 类型(长度) [约束],<br>字段名 类型(长度) [约束],<br>字段名 类型(长度) [约束],<br>………<br> );</p></li><li><p>字符类型: varchar(n)</p></li><li><p>查看表: show tables;</p></li><li><p>查看表的结构: desc 表名; </p></li><li><p>删除表: drop table 表名; </p></li><li><p>修改表:<br> 6.1 添加一列: alter table 表名 add 字段名 类型(长度) [约束];<br> 6.2 修改列的类型长度: alter table 表名 modify 要修改的字段名 类型(长度) [约束];<br> 6.3 修改表的列名: alter table 表名 change 旧列名 新列名 类型(长度) [约束];<br> 6.4 删除表的列: alter table 表名 drop 列名;<br> 6.5 修改表名: rename table 表名 to 新表名;<br> 6.6 修改表的字符集: alter table 表名 character set 字符编码;<br> 6.7 查看当前表的编码: show create table 表名;<br> 6.8 向表中插入记录: insert into  表名(列名1,列名2,列名3,…) values (数据1,数据2,数据3,…); 对应字段值设置值<br>insert into  表名 values (数据1,数据2,数据3,…); 每一个字段都要设置值</p></li><li><p>查入中文数据乱码问题解决:<br>7.1  方式一[不建议使用]<br> 直接修改数据库安装目录里的 my.ini 文件:<br>50行左右 default-character-set = utf-8<br>7.2 方式二<br>  cmd  数据库中  set names gbk;</p></li><li><p>修改表记录:</p><p>8.1 不带条件的：<br>  update 表名 set  字段名 = 值;<br>8.2 带条件的:<br> update 表名 set 字段名 = 值 where 条件(例如 name = ‘stone’);</p></li></ol><ol start="9"><li><p>删除表记录:</p><p> 9.1 带条件的:<br> delete from 表名  where 条件; </p><p> 9.2 不带条件的:<br> delete from 表名; [数据会被全部删除]</p></li><li><p>delete 和 truncate 的区别:</p><p>10.1 delete 删除的时候是一条一条的删除，他配合事务,可以将删除的数据找回<br>10.2 truncate 删除,他是将整个表摧毁,然后在创建一模一样的表。 他删除的数据无法找回</p></li></ol><ol start="11"><li>开启事务: start transaction; </li><li>事务回滚: rollback; </li></ol><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作:"></a>查询操作:</h3><ol><li><p>语法:select [distinct] *| 列名, 列名, from 表名 [where 条件]</p><p>查询所有: select  from product;表别名: select  fromo product as p;<br>列别名: select pname as p from product;<br>去重复: select distinck(price) from product;<br> 所有商品价格 +10进行显示: select pname,price+10, from product;</p></li></ol><ol start="2"><li><p>条件查询: </p><p> 2.1 查询商品名称为’a’的商品信息: select  from product where name = &#39;a&#39;; 2.2 查询商品价格 &gt; 60 的所有商品信息: select  from product where price &gt; 60;<br> 2.3 查询所有商品含 ‘士’ 的商品信息： select  from procut where pname like &#39;%士&#39;; 2.4 查询商品id 在(3,6,9) 范围内的所有商品信息: select  from product where id in(3,6,9);<br> 2.5 查询商品名称为’a’ 并且id 为 9 的商品信息: select * from product where pname = ‘a’ and id = 9; </p><p> 2.6 查询id 为 3 或者 为 6 的商品信息: select * from product where id = 3 or id = 6;</p></li><li><p>排序:<br>  查询所有的商品按价格排序: select * from product order by price asc;  (asc 升序 desc 降序)</p><p> order by 需要放在条件where 的后面: select * from product where pname like ‘%士%’ order by price;</p></li><li><p>聚合: </p><p> 求和: sum()<br> 平均值: avg()<br> 最大值: max()<br> 最小值：min()<br> 计数: count()   </p><blockquote><p> 注意: 聚合函数不统计null值</p></blockquote><p> 查询所有商品的价格总和: select sum(price) from product;<br> 获得商品的平均价: select avg(price) from product;<br> 获得所有商品的数量: select count(*) from product;</p></li><li><p>分组: </p><p> 根据字段cid 分组,统计商品个数: select cid,count(*)  from procut group by cid;<br> 根据字段cid 分组,统计商品平均价格,并且平均价格大于 2000 元: select cid,avg(price) from product group by cid having<br> avg(price) &gt; 2000;</p><blockquote><p>注意:分组后使用条件只能用  having</p></blockquote></li><li><p>查询总结:</p><p> select distinct *|字段<br> from 表<br> where 查询条件<br> group by  分组字段<br> having  分组条件<br> order by 排序字段 asc|desc   [必须要放在后边]</p></li></ol><h3 id="外键"><a href="#外键" class="headerlink" title="外键:"></a>外键:</h3><ol><li>特点:<br> 从表外键的值是对主表主键的引用<br> 从表外键类型，必须与主表主键类型一致</li></ol><ol start="2"><li><p>使用外键保证数据的完整性<br>从表不能删除，从表中已引用的记录;</p></li><li><p>声明外键约束</p><p> 语法: alter table 从表 add [constraint] [外键名称] foreign key (从表外键字段名) refercnces 主表(主表的主键);</p></li></ol><h3 id="数据库之表与表之间的关系-（待完善）"><a href="#数据库之表与表之间的关系-（待完善）" class="headerlink" title="数据库之表与表之间的关系:   （待完善）"></a>数据库之表与表之间的关系:   （待完善）</h3><ol><li>多对一或者一对多</li><li>一对一</li><li>多对多   三张表(两张主表,一张从表,提供两个字段,都是外键)</li></ol><h3 id="内连接查询-使用inner-join-–inner-可以省略"><a href="#内连接查询-使用inner-join-–inner-可以省略" class="headerlink" title="内连接查询 使用inner join  –inner 可以省略"></a>内连接查询 使用inner join  –inner 可以省略</h3><ol><li>查询连个表的交集</li><li>隐式内连接 select * from A,B where 条件</li><li>显示内连接 select * from A inner join B on 条件</li></ol><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><ol><li><p>左连接<br>左表全部及连个表的交集<br>left outer join<br>select * from left outer join B on 条件</p></li><li><p>右连接<br>右边全部及两个表的交集<br>right outer join<br>select * from A right outer join B on 条件 </p></li></ol><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ol><li>将一条select 语句结果作为另一条select语法一部分(查询条件,查询结果,表等    ) 去查询</li></ol>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>httpRequest和HttpResponse</title>
      <link href="/stoneblog/2020/04/30/httpRequestHttpResponse/"/>
      <url>/stoneblog/2020/04/30/httpRequestHttpResponse/</url>
      
        <content type="html"><![CDATA[<h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title=" HttpServletResponse "></a><center> HttpServletResponse </center></h2><p><img src="/stoneblog/2020/04/30/httpRequestHttpResponse/%E5%93%8D%E5%BA%94%E8%BF%87%E7%A8%8B.png" alt></p><h3 id="response-设置响应行"><a href="#response-设置响应行" class="headerlink" title="response 设置响应行"></a>response 设置响应行</h3><ol><li>设置响应行的状态码<br> response.setStatus(整数);</li></ol><h3 id="response-设置响应头"><a href="#response-设置响应头" class="headerlink" title="response 设置响应头"></a>response 设置响应头</h3><ol><li>response.addHeader(String name, String value);</li><li>response.addIntHeader(String name,Int value);</li><li>response.addDateHeader(String name,long date);</li><li>response.setHeader(String name, String value);     （重要）</li><li>response.setDateHeader(String name,long date);</li><li>response.setIntHeader(String name,Int value);<ul><li>重定向: <img src="/stoneblog/2020/04/30/httpRequestHttpResponse/%E9%87%8D%E5%AE%9A%E5%90%91.png" alt><br>setStatus(302);<br>setHeader(“Location”,”/web/servlet2”)<br>状态码：302，  响应头：location 代表重定向的地址。<br>或者直接用封装好的方法: response.sendRedirect(“/web/servlet2”);</li><li>定时刷新<br>response.setHeader(“refresh”,”5;url=<a href="http://www.baidu.com&quot;" target="_blank" rel="noopener">http://www.baidu.com&quot;</a>);<br>5 秒钟跳转到百度的页面</li><li>解决中文乱码问题<br>response.setContentType(“text/html;charset=utf-8”);</li></ul></li></ol><h3 id="response-设置响应体"><a href="#response-设置响应体" class="headerlink" title="response 设置响应体"></a>response 设置响应体</h3><ol><li>设置响应体文本<br>PrintWriter writer = response.getWriter();<br>writer.write(“文本”);</li><li>字节输出流<br> ServletOutputStream outputStream = response.getOutputStream();<br> outputStream.write(字节);    </li></ol><h3 id="response-细节点"><a href="#response-细节点" class="headerlink" title="response 细节点"></a>response 细节点</h3><ol><li>response 获得的流不需手动关闭，web容器(tomcat容器)会帮助我们关闭</li><li>getWriter() 和getOutPutStream 不能同时调用 </li><li>重定向后边的代码不执行了</li><li>response 缓冲区大小8k，response.getBufferSize()</li></ol><h2 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h2><h3 id="通过request获得请求行"><a href="#通过request获得请求行" class="headerlink" title="通过request获得请求行"></a>通过request获得请求行</h3><ol><li>获得客户端的请求方式(get or post)<br> request.getMethod();</li><li>获得请求资源<br> request.getContextPath(); // web项目工程名称(web应用的名称)<br> request.getQueryString(); // 获取的get提交url地址后的参数字符串</li><li>获得请求头<br> request.getHeader(name);// 获得指定的头<br> Enumeration<String> headerNames = request.getHeaderNames(); // 返回枚举类型返回头的所有名称</String></li><li>获得请求体<br> request.getParamter();<br> request.getParamterVlaues();<br> request.getParameterMap();<br> 注意: get请求方法的请求参数上述方法照样可以使用</li><li>获得客户端的信息<br> request.getRemoteAddr();    // ip<br>referer 头的作用是： 执行此次访问的来源,可以做防盗链 (根据域名)<br><img src="/stoneblog/2020/04/30/httpRequestHttpResponse/%E8%AF%B7%E6%B1%822.png" alt></li></ol><h3 id="request-是一个域对象"><a href="#request-是一个域对象" class="headerlink" title="request 是一个域对象"></a>request 是一个域对象</h3><ul><li>request 对象也是一个存储数据的域对象，所以有如下方法</li><li>setAttribute(String name,Object obj);</li><li>getAttributte(String name);</li><li>removeAttribue(String name);    </li><li>域对象学习的是域的作用范围<br>  注意:request 域的作用范围: 一次请求中</li></ul><h3 id="请求转发，重定向"><a href="#请求转发，重定向" class="headerlink" title="请求转发，重定向"></a>请求转发，重定向</h3><ol><li>request 完成请求转发(一次请求)<br>  获得请求转发器 – path 是转发的地址<br>  RequestDispatcher requestDispatcher = request.getRequestDispatcher(path);<br>  通过转发器对象转发<br> requestDispatcher.forward(request, response);</li><li>重定向(两次请求)<br> response.sendRedirect(“path”);</li><li>请求转发 重定向流程图<br> <img src="/stoneblog/2020/04/30/httpRequestHttpResponse/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91-%E9%87%8D%E5%AE%9A%E5%90%91.png" alt></li></ol><h3 id="客户端地址服务器端地址"><a href="#客户端地址服务器端地址" class="headerlink" title="客户端地址服务器端地址"></a>客户端地址服务器端地址</h3><ol><li><p>客户端地址<br>客户端访问服务器的地址，是一个外部地址。因为服务器中可能有多个web应用，所以客户端地址要加上web应用名。</p><p>/webprogram/url-petten  其中最前面的/表示当前服务器： <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p><p>常见的客户端地址：</p><p>浏览器地址栏输入的url：<a href="http://localhost:8080/webprogranname/目标servlet的url-patten" target="_blank" rel="noopener">http://localhost:8080/webprogranname/目标servlet的url-patten</a><br>重定向的地址：response.sendRedirect(“/webprogram/url-petten”);或者response.sendRedirect(“<a href="http://www.sougou.com&quot;" target="_blank" rel="noopener">http://www.sougou.com&quot;</a>);</p></li><li><p>服务器端地址<br>服务器中web应用内部跳转的地址，因为在web应用内部，故不用加web应用名。<br>常见服务端地址：<br>转发：request.getRequestDispatcher(“/目标servlet的url-patten”)</p></li><li><p>不加“/”的情况<br>如果不加“/”则会到全局的web.xml中找为“/”的\<url-patten>这个\<url-patten>会到web项目下去寻找目标资源是否存在，如果存在就读取然后写到客户端。</url-patten></url-patten></p></li><li><p>如果加“/”则直接在服务器目录下去找不会到web项目下去找 </p></li></ol><p>*总结：尽量使用客户端或者服务器地址，而不要使用不带“/”的地址。*</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>servlet</title>
      <link href="/stoneblog/2020/04/30/servlet/"/>
      <url>/stoneblog/2020/04/30/servlet/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Servelt-Interface"><a href="#什么是Servelt-Interface" class="headerlink" title="什么是Servelt  (Interface)"></a>什么是Servelt  (Interface)</h3><blockquote><p>Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p></blockquote><h3 id="serlvet-规范-接口-包含三个技术点"><a href="#serlvet-规范-接口-包含三个技术点" class="headerlink" title="serlvet 规范(接口)    包含三个技术点"></a>serlvet 规范(接口)    包含三个技术点</h3><ul><li>servlet 技术</li><li>filter 技术 – 过滤器</li><li>listener 技术 - 监听器</li></ul><h3 id="快速实现"><a href="#快速实现" class="headerlink" title="快速实现"></a>快速实现</h3><ul><li>创建类实现servlet接口</li><li>覆盖尚未实现的方法</li><li>在web.xml 进行servlet配置 </li></ul><h3 id="Servlet-接口中的方法"><a href="#Servlet-接口中的方法" class="headerlink" title="Servlet 接口中的方法"></a>Servlet 接口中的方法</h3><ol><li>init(ServletConfig arg0)<br> 何时执行：servelt 对象创建的时候</li><li>service(ServletRequest req,ServletResponse res)<br>何时执行: 每次都会执行</li><li>destroy()<br> 何时执行:  servlet 对象销毁的时候执行</li></ol><h3 id="Servlet-的配置"><a href="#Servlet-的配置" class="headerlink" title="Servlet 的配置"></a>Servlet 的配置</h3><ol><li>servlet的配置文件是web.xml</li><li>url-pattern的配置方式<br>  完全匹配<br>  目录匹配<br>  扩展名配置<br>  注意: 第二种不能和第三种连用 </li></ol><h3 id="Servlet-的生命周期-面试题中会有"><a href="#Servlet-的生命周期-面试题中会有" class="headerlink" title="Servlet 的生命周期(面试题中会有)"></a>Servlet 的生命周期(面试题中会有)</h3><ol><li><p>创建 ：<br>默认第一次访问 时创建Servlet对象<br>为什么是默认: servlet 对象的创建,是可以配置的<br>load-on-startup  对象在服务器启动时创建</p></li><li><p>销毁：<br>服务器关闭 servlet 销毁</p></li><li><p>每次访问服务器必然执行的方法:<br>servlet(ServletRequest req,ServletResponse res) 方法<br>ServletRequest 代表请求  认为ServletRequest 内部封装的是 http请求的信息          ServletResponse 代表响应  认为ServletResponse 要封装的响应信息</p></li></ol><h3 id="servelt-访问过程"><a href="#servelt-访问过程" class="headerlink" title="servelt 访问过程"></a>servelt 访问过程</h3><p> <img src="/stoneblog/2020/04/30/servlet/servlet.png" alt><br><img src="/stoneblog/2020/04/30/servlet/servlet%E8%AE%BF%E9%97%AE%E8%BF%87%E7%A8%8B.png" alt></p><h3 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h3><p>  配置文件web.xml中</p><blockquote><p> web应用中的所有资源的响应都是 servlet 负责的,包括静态资源!</p></blockquote><h3 id="实际开发中"><a href="#实际开发中" class="headerlink" title="实际开发中"></a>实际开发中</h3><blockquote><p> 我们不是实现（implements）接口servlet，而是去继承（extends）HttpServlet 类</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议(包括GET和POST)</title>
      <link href="/stoneblog/2020/04/28/servleta/"/>
      <url>/stoneblog/2020/04/28/servleta/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议 "></a><center>HTTP协议 </center></h1><h2 id="什么是HTTP协议"><a href="#什么是HTTP协议" class="headerlink" title="什么是HTTP协议"></a>什么是HTTP协议</h2><ul><li>HTTP协议（HyperText Transfer Protocol，超文本传输协议）是因特网上应用最为广泛的一种网络传输协议，是一个无状态的请求/响应协议。</li><li>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</li></ul><h2 id="HTTP请求-响应结构"><a href="#HTTP请求-响应结构" class="headerlink" title="HTTP请求/响应结构"></a>HTTP请求/响应结构</h2><h3 id="1-请求"><a href="#1-请求" class="headerlink" title="1. 请求"></a>1. 请求</h3><ul><li>一个HTTP请求由四个部分组成：请求行、请求头部、空行、请求体。<br><img src="/stoneblog/2020/04/28/servleta/%E8%AF%B7%E6%B1%82.png" alt></li><li>请求行<ul><li>请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。比如 GET /data/info.html HTTP/1.1</li><li>方法字段就是HTTP使用的请求方法，比如常见的GET/POST</li><li>其中HTTP协议版本有两种：HTTP1.0/HTTP1.1 可以这样区别：</li><li>HTTP1.0对于每个连接都只能传送一个请求和响应，请求就会关闭，            HTTP1.0没有Host字段;而HTTP1.1在同一个连接中可以传送多个请求和响应，多个请求可以重叠和同时进行，HTTP1.1必须有Host字段。</li></ul></li><li>请求头 <ul><li>HTTP客户程序(例如浏览器)，向服务器发送请求的时候必须指明请求类型(一般是GET或者 POST)。如有必要，客户程序还可以选择发送其他的请求头。大多数请求头并不是必需的，但Content-Length除外。对于POST请求来说 Content-Length必须出现。</li><li>常见的请求头字段含义：<ul><li>Accept： 浏览器可接受的MIME类型。</li><li>Accept-Charset：浏览器可接受的字符集。</li><li>Accept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。</li><li>Accept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。</li><li>Authorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。</li><li>Content-Length：表示请求消息正文的长度。</li><li>Host： 客户机通过这个头告诉服务器，想访问的主机名。Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。</li><li>If-Modified-Since：客户机通过这个头告诉服务器，资源的缓存时间。只有当所请求的内容在指定的时间后又经过修改才返回它，否则返回304“Not Modified”应答。</li><li>Referer：客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的(防盗链)。包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。</li><li>User-Agent：User-Agent头域的内容包含发出请求的用户信息。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。</li><li>Cookie：客户机通过这个头可以向服务器带数据，这是最重要的请求头信息之一。</li><li>Pragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝。</li><li>From：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。</li><li>Connection：处理完这次请求后是否断开连接还是继续保持连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP 1.1(HTTP 1.1默认进行持久连接)，它就可以利用持久连接的优点，当页面包含多个元素时(例如Applet，图片)，显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。</li><li>Range：Range头域可以请求实体的一个或者多个子范围。例如，   <ul><li>表示头500个字节：bytes=0-499</li><li>表示第二个500字节：bytes=500-999</li><li>表示最后500个字节：bytes=-500</li><li>表示500字节以后的范围：bytes=500-</li><li>第一个和最后一个字节：bytes=0-0,-1</li><li>同时指定几个范围：bytes=500-600,601-999</li><li>但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206(PartialContent)返回而不是以200 (OK)。</li><li>UA-Pixels，UA-Color，UA-OS，UA-CPU：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。</li></ul></li></ul></li></ul></li><li>空行(请求头和请求体之间的空行)<ul><li>它的作用是通过一个空行，告诉服务器请求头部到此为止。    </li></ul></li><li>请求体  <ul><li>若方法字段是GET，则此项为空，没有数据，提交的数据在地址栏上。</li><li>若方法字段是POST,则通常来说此处放置的就是要提交的数据</li><li>比如要使用POST方法提交一个表单，其中有user字段中数据为“lisi”, password字段为12345，那么这里的请求体就是 user=lisi&amp;password=12345，使用&amp;来连接各个字段。</li></ul></li></ul><h3 id="2-响应"><a href="#2-响应" class="headerlink" title="2. 响应"></a>2. 响应</h3><ul><li><p>同样的，HTTP响应报文也由三部分组成：响应行、响应头、响应体<br><img src="http%E5%93%8D%E5%BA%94.png" alt><br><img src="/stoneblog/2020/04/28/servleta/last-modified.png" alt></p><ul><li>响应行</li></ul><ul><li>响应行一般由协议版本、状态码和状态描述组成 比如 HTTP/1.1 200 OK</li><li>常见状态码见图中</li></ul><ul><li>响应头</li></ul><ul><li><p>响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据。</p></li><li><p>设置HTTP响应头往往和状态码结合起来。例如，有好几个表示“文档位置已经改变”的状态代码都伴随着一个Location  头，而401(Unauthorized)状态代码则必须伴随一个WWW-Authenticate头。然而，即使在没有设置特殊含义的状态代码时，指定应答头也是很有用的。应答头可以用来完成：设置Cookie，指定修改日期，指示浏览器按照指定的间隔刷新页面，声明文档的长度以便利用持久HTTP连接，……等等许多其他任务。</p></li><li><p>常见的响应头字段含义：</p><ul><li><p>Allow：服务器支持哪些请求方法(如GET、POST等)。</p></li><li><p>Content-Encoding：文档的编码(Encode)方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。<a href="https://www.2cto.com/kf/ware/Java/" target="_blank" rel="noopener">Java</a>的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE4、IE5才支持它。因此，Servlet应该通过查看Accept-Encoding头(即request.getHeader(“Accept- Encoding”))检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</p></li><li><p>Content-Length：表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</p></li><li><p>Content- Type：表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置 Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</p></li><li><p>Date：当前的GMT时间，例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</p></li><li><p>Expires：告诉浏览器把回送的资源缓存多长时间，-1或0则是不缓存。</p></li><li><p>Last-Modified：文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304(Not Modified)状态。Last-Modified也可用setDateHeader方法来设置。</p></li><li><p>Location：这个头配合302状态码使用，用于重定向接收者到一个新URI地址。表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</p></li><li><p>Refresh：告诉浏览器隔多久刷新一次，以秒计。</p></li><li><p>Server：服务器通过这个头告诉浏览器服务器的类型。Server响应头包含处理请求的原始服务器的软件信息。此域能包含多个产品标识和注释，产品标识一般按照重要性排序。Servlet一般不设置这个值，而是由Web服务器自己设置。</p></li><li><p>Set-Cookie：设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。</p></li><li><p>Transfer-Encoding：告诉浏览器数据的传送格式。</p></li><li><p>WWW-Authenticate：客户应该在Authorization头中提供什么类型的授权信息?在包含401(Unauthorized)状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=\\”executives\\”“)。注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问。</p></li><li><p>注：设置应答头最常用的方法是HttpServletResponse的setHeader，该方法有两个参数，分别表示应答头的名字和值。和设置状态代码相似，设置应答头应该在发送任何文档内容之前进行。</p></li><li><p>setDateHeader方法和setIntHeadr方法专门用来设置包含日期和整数值的应答头，前者避免了把Java时间转换为GMT时间字符串的麻烦，后者则避免了把整数转换为字符串的麻烦。</p></li><li><p>HttpServletResponse还提供了许多设置<br> setContentType：设置Content-Type头。大多数Servlet都要用到这个方法。</p></li><li><p>setContentLength：设置Content-Length头。对于支持持久HTTP连接的浏览器来说，这个函数是很有用的。</p></li><li><p>addCookie：设置一个Cookie(Servlet API中没有setCookie方法，因为应答往往包含多个Set-Cookie头)。</p></li></ul></li></ul><ul><li>响应体  <ul><li>响应体就是响应的消息体，如果是纯数据就是返回纯数据，如果请求的是HTML页面，那么返回的就是HTML代码，如果是JS就是JS代码，如此之类。</li></ul></li></ul></li></ul><h2 id="GET-和-POST-分区"><a href="#GET-和-POST-分区" class="headerlink" title="GET 和 POST 分区"></a>GET 和 POST 分区</h2><h3 id="1-提交数据的形式："><a href="#1-提交数据的形式：" class="headerlink" title="1. 提交数据的形式："></a>1. 提交数据的形式：</h3><ul><li>GET请求的数据会附在URL之后(就是把数据放置在HTTP协议头中)，会直接展现在地址栏中，以?分割URL和传输数据，参数之间以&amp;相连，如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0%E5 %A5%BD。<br>如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，<br>得出如：%E4 %BD%A0%E5%A5%BD，其中%XX中的XX为该符号以16进制表示的ASCII。<br>而POST方法则会把数据放到请求数据字段中以&amp;分隔各个字段，请求行不包含数据参数，地址栏也不会额外附带参数<h3 id="2-提交数据的大小"><a href="#2-提交数据的大小" class="headerlink" title="2. 提交数据的大小"></a>2. 提交数据的大小</h3></li><li>get方法提交数据的大小直接影响到了URL的长度，但HTTP协议规范中其实是没有对URL限制长度的，限制URL长度的是客户端或服务器的支持的不同所影响：比如IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。<br>post方式HTTP协议规范中也没有限定，起限制作用的是服务器的处理程序的处理能力。<br>所以大小的限制还是得受各个web服务器配置的不同而影响。<h3 id="3-提交数据的安全"><a href="#3-提交数据的安全" class="headerlink" title="3. 提交数据的安全"></a>3. 提交数据的安全</h3></li><li>POST比GET方式的安全性要高，通过GET提交数据，用户名和密码将明文出现在URL上，因为一下几个原因get方式安全性会比post弱：<br>(1)登录页面有可能被浏览器缓存<br>(2)其他人查看浏览器的历史纪录，那么别人就可 以拿到你的账号和密码了<br>(3)当遇上跨站的攻击时，安全性的表现更差了</li></ul>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 编辑器语法</title>
      <link href="/stoneblog/2020/04/27/hello-world/"/>
      <url>/stoneblog/2020/04/27/hello-world/</url>
      
        <content type="html"><![CDATA[<!-- ![](one.jpg) --><h1 id="Markdown的基本语法"><a href="#Markdown的基本语法" class="headerlink" title="Markdown的基本语法 "></a><center>Markdown的基本语法 </center></h1><blockquote><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。<br>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。<br>Markdown 编写的文档后缀为 .md, .markdown。当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。</p></blockquote><h2 id="一，基本技巧"><a href="#一，基本技巧" class="headerlink" title="一，基本技巧"></a>一，基本技巧</h2><h3 id="1-代码高亮"><a href="#1-代码高亮" class="headerlink" title="1.  代码高亮"></a>1.  代码高亮</h3><pre><code> ```javascript    $(document).ready(function(){       alert(&quot;hello world&quot;);    });```</code></pre><h3 id="2-标题"><a href="#2-标题" class="headerlink" title="2. 标题"></a>2. 标题</h3><blockquote><p>文章内容较多时，可以用标题分段：</p></blockquote><pre><code>标题一=====标题二--------- # 大标题## 小标题</code></pre><h3 id="3-粗斜体"><a href="#3-粗斜体" class="headerlink" title="3. 粗斜体"></a>3. 粗斜体</h3><pre><code>*斜体文本****斜体文本***</code></pre><h3 id="4-链接"><a href="#4-链接" class="headerlink" title="4. 链接"></a>4. 链接</h3><blockquote><p>常用链接方法</p></blockquote><pre><code>文字链接  [链接名称](http://链接网址)网址链接  &lt;http://链接网址&gt;</code></pre><blockquote><p>高级链接技巧</p></blockquote><blockquote><p>这个链接用 1 作为网址变量 [Google][1].<br>这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].<br>然后在文档的结尾为变量赋值（网址）</p></blockquote><pre><code>  [1]: http://www.google.com/  [yahoo]: http://www.yahoo.com/</code></pre><h3 id="5-列表"><a href="#5-列表" class="headerlink" title="5.  列表"></a>5.  列表</h3><blockquote><p>普通无序列表</p></blockquote><pre><code>- 列表文本前使用 [减号+空格]+ 列表文本前使用 [加号+空格]* 列表文本前使用 [星号+空格]</code></pre><blockquote><p>普通有序列表</p></blockquote><pre><code>1. 列表前使用 [数字+空格]2. 我们会自动帮你添加数字7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3</code></pre><blockquote><p> 列表嵌套</p></blockquote><pre><code>1. 列出所有元素：    - 无序列表元素 A        1. 元素 A 的有序子列表    - 前面加四个空格2. 列表里的多段换行：    前面必须加四个空格，    这样换行，整体的格式不会乱3. 列表里引用：    &gt; 前面空一行    &gt; 仍然需要在 &gt;  前面加四个空格4. 列表里代码段：    前面四个空格，之后按代码语法 ``` 书写    或者直接空八个，引入代码块</code></pre><h3 id="6-引用"><a href="#6-引用" class="headerlink" title="6. 引用"></a>6. 引用</h3><blockquote><p>普通引用</p></blockquote><pre><code>&gt; 引用文本前使用 [大于号+空格]&gt; 折行可以不加，新起一行都要加上哦</code></pre><blockquote><p>引用里嵌套引用</p></blockquote><pre><code>&gt; 最外层引用&gt; &gt; 多一个&gt; 嵌套一层引用&gt; &gt;&gt; 可以套很多层</code></pre><blockquote><p>引用里面嵌套列表</p></blockquote><pre><code>&gt;  -  这是引用里面嵌套一个列表&gt;  - 还可以有子列表&gt;     * 子列表需要从 - 之后延后四个空格开始</code></pre><blockquote><p>应用里面嵌套代码块</p></blockquote><pre><code>&gt;     同样的, 在前面加四个空格形成代码块&gt;  ``` &gt; 或者使用```形成代码块&gt;  ```</code></pre><h3 id="7-图片"><a href="#7-图片" class="headerlink" title="7. 图片"></a>7. 图片</h3><blockquote><p>跟连接的方法区别在于前面加了个感叹号! 这样是不是觉得好记多了呢?</p></blockquote><pre><code>![图片名称](http://图片网址)</code></pre><blockquote><p>当然,你也可以像网址那样对图片网址使用变量</p></blockquote><pre><code>这个链接用1作为网址的变量 [baidu][1].然后再文档的结尾位置变量赋值网址(网址) [1]: http:// www.baidu.com/logo.png</code></pre><h3 id="7-换行"><a href="#7-换行" class="headerlink" title="7. 换行"></a>7. 换行</h3><blockquote><p>如果另起一行,只需在当前行的末尾加2个空格</p></blockquote><pre><code>在当前行的末尾加2个空格   这样就会另起一行</code></pre><blockquote><blockquote><p> 如果要新起一个段落,只需要空出一行即可。</p></blockquote></blockquote><h3 id="8-分隔符"><a href="#8-分隔符" class="headerlink" title="8. 分隔符"></a>8. 分隔符</h3><blockquote><p>如果你有写分割线的习惯,可以新起一行输入三个减号-。当前后都有段落时,请空出一行:</p></blockquote><pre><code>前面的段落---后面的段落</code></pre><h2 id="二，高级技巧"><a href="#二，高级技巧" class="headerlink" title="二，高级技巧"></a>二，高级技巧</h2><h3 id="1-行内-HTML-元素"><a href="#1-行内-HTML-元素" class="headerlink" title="1.  行内 HTML 元素"></a>1.  行内 HTML 元素</h3><blockquote><p>目前只支持部分段内 HTML 元素效果，包括 </p></blockquote><pre><code>&lt;kdb&gt; &lt;b&gt;  &lt;i&gt;  &lt;em&gt;  &lt;sup&gt;  &lt;sub&gt;  &lt;br&gt;</code></pre><p>键位显示</p><pre><code>使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑</code></pre><p>代码块</p><pre><code>使用&lt;pre&gt;&lt;/pre&gt;元素同样可以形成代码块</code></pre><p>粗斜体</p><pre><code>&lt;b&gt;Markdown 再此同样适用, 如 *加粗*  &lt;/b&gt;</code></pre><h3 id="2-符号转义"><a href="#2-符号转义" class="headerlink" title="2.  符号转义"></a>2.  符号转义</h3><blockquote><p>如果你的描述中需要用到 markdown 的符号，比如_#等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如\_\#\进行避免。</p></blockquote><pre><code>\_不想这里的文本变斜体\_\*\*不想这里的文本被加粗\*\*</code></pre><h3 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3. 扩展"></a>3. 扩展</h3><blockquote><p>支持 jsfiddle、gist、runjs、优酷视频，直接填写 url，在其之后会自动添加预览点击会展开相关内容。</p></blockquote><pre><code>http://{url_of_the_fiddle}/embedded/[{tabs}/[{style}]]/https://gist.github.com/{gist_id}http://runjs.cn/detail/{id}http://v.youku.com/v_show/id_{video_id}.html</code></pre><h3 id="4-公式"><a href="#4-公式" class="headerlink" title="4. 公式"></a>4. 公式</h3><blockquote><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符$$包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p></blockquote><pre><code>$$ x = {-b \pm \sqrt{b^2-4ac} \over 2a}. $$$$x \href{why-equal.html}{=} y^2 + 1$$</code></pre><blockquote><p>同时也支持 HTML 属性，如：</p><pre><code> $$ (x+1)^2 = \class{hidden}{(x+1)(x+1)} $$$$(x+1)^2 = \cssId{step1}{\style{visibility:hidden}{(x+1)(x+1)}}$$</code></pre></blockquote><hr><br><div align="right">【完结】</div>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
